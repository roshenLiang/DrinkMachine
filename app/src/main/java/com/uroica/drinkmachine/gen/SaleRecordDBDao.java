package com.uroica.drinkmachine.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uroica.drinkmachine.bean.db.SaleRecordDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SALE_RECORD_DB".
*/
public class SaleRecordDBDao extends AbstractDao<SaleRecordDB, Long> {

    public static final String TABLENAME = "SALE_RECORD_DB";

    /**
     * Properties of entity SaleRecordDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Sid = new Property(0, Long.class, "Sid", true, "_id");
        public final static Property OrderID = new Property(1, String.class, "orderID", false, "orderID");
        public final static Property Time = new Property(2, long.class, "time", false, "time");
        public final static Property From = new Property(3, int.class, "from", false, "from");
        public final static Property ProductName = new Property(4, String.class, "productName", false, "productName");
        public final static Property Price = new Property(5, String.class, "price", false, "price");
        public final static Property Shipment_status = new Property(6, int.class, "shipment_status", false, "shipment_status");
        public final static Property Month = new Property(7, int.class, "month", false, "month");
    }


    public SaleRecordDBDao(DaoConfig config) {
        super(config);
    }
    
    public SaleRecordDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SALE_RECORD_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Sid
                "\"orderID\" TEXT," + // 1: orderID
                "\"time\" INTEGER NOT NULL ," + // 2: time
                "\"from\" INTEGER NOT NULL ," + // 3: from
                "\"productName\" TEXT," + // 4: productName
                "\"price\" TEXT," + // 5: price
                "\"shipment_status\" INTEGER NOT NULL ," + // 6: shipment_status
                "\"month\" INTEGER NOT NULL );"); // 7: month
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SALE_RECORD_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SaleRecordDB entity) {
        stmt.clearBindings();
 
        Long Sid = entity.getSid();
        if (Sid != null) {
            stmt.bindLong(1, Sid);
        }
 
        String orderID = entity.getOrderID();
        if (orderID != null) {
            stmt.bindString(2, orderID);
        }
        stmt.bindLong(3, entity.getTime());
        stmt.bindLong(4, entity.getFrom());
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(5, productName);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(6, price);
        }
        stmt.bindLong(7, entity.getShipment_status());
        stmt.bindLong(8, entity.getMonth());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SaleRecordDB entity) {
        stmt.clearBindings();
 
        Long Sid = entity.getSid();
        if (Sid != null) {
            stmt.bindLong(1, Sid);
        }
 
        String orderID = entity.getOrderID();
        if (orderID != null) {
            stmt.bindString(2, orderID);
        }
        stmt.bindLong(3, entity.getTime());
        stmt.bindLong(4, entity.getFrom());
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(5, productName);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(6, price);
        }
        stmt.bindLong(7, entity.getShipment_status());
        stmt.bindLong(8, entity.getMonth());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SaleRecordDB readEntity(Cursor cursor, int offset) {
        SaleRecordDB entity = new SaleRecordDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Sid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderID
            cursor.getLong(offset + 2), // time
            cursor.getInt(offset + 3), // from
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // productName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // price
            cursor.getInt(offset + 6), // shipment_status
            cursor.getInt(offset + 7) // month
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SaleRecordDB entity, int offset) {
        entity.setSid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.getLong(offset + 2));
        entity.setFrom(cursor.getInt(offset + 3));
        entity.setProductName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrice(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setShipment_status(cursor.getInt(offset + 6));
        entity.setMonth(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SaleRecordDB entity, long rowId) {
        entity.setSid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SaleRecordDB entity) {
        if(entity != null) {
            return entity.getSid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SaleRecordDB entity) {
        return entity.getSid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
